<launch>
    <!-- Bring up a basic keepalive node for other more primative nodes to track --> 
    <node 
       pkg="tenacity_ros"
       type="keepalive.py"
       name="keepalive">
    </node>

    <!-- start corner_steering node -->
    <node 
        pkg="tenacity_ros"
        type="teleop_corner_twist.py"
        name="teleop_corner_twist">
     </node>

    <!-- start trim_steering node --> 
    <node 
        pkg="tenacity_ros"
        type="steering_corner_twist.py"
        name="steering_corner_twist">
     </node>

    <include file="$(find tenacity_steering)/controller_manager.launch">
    </include>
    
    <!--<include file="$(find tenacity_steering)/start_tilt_controller.launch"> -->
    <include file="$(find tenacity_steering)/start_steering_controller.launch">
    </include>

    <!--bring up a robot_description and robot_state_publisher for navigation and localization -->
    <include file="$(find tenacity_description)/launch/description.launch" >
    </include> 

  <!--  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/> -->
   
    <!-- start microstrain IMU --> 
    <include file="$(find ros_mscl)/launch/microstrain.launch">
    <arg name="port" value="/dev/microstrain"/>
    </include> 

   <!-- start optical flow from OpenMV Cam -->
   <include file="$(find openmv_flow)/launch/openmv_flow.launch">
   </include>

    <!-- start watchdog manager to monitor alert states -->
    <include file="$(find tenacity_watchdog_manager)/launch/watchdog_manager.launch"> 
    </include>
   <!-- start sonars from octosonar board -->
   <include file="$(find ros_octosonar)/launch/ros_octosonar.launch">
   </include>

</launch>
